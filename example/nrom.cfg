MEMORY {

  ZP: 		start = $0000, size = $0100, type = rw, define = yes;
  HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
  PRG: 		start = $c000, size = $3fc0, file = %O ,fill = yes, define = yes;
  DMC: 		start = $ffc0, size = $003a, file = %O, fill = yes;
  VECTORS: 	start = $fffa, size = $0006, file = %O, fill = yes;
  RAM:		start = $0300, size = $0500, define = yes;
}

SEGMENTS {

  HEADER:   load = HEADER,         type = ro;
  STARTUP:  load = PRG,            type = ro,  define = yes;
  LOWCODE:  load = PRG,            type = ro,                optional = yes;
  INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
  CODE:     load = PRG,            type = ro,  define = yes;
  RODATA:   load = PRG,            type = ro,  define = yes;
  DATA:     load = PRG, run = RAM, type = rw,  define = yes;
  VECTORS:  load = VECTORS,        type = rw;
  SAMPLES:  load = DMC,            type = rw;
  BSS:      load = RAM,            type = bss, define = yes;
  HEAP:     load = RAM,            type = bss, optional = yes;
  ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
	NES_MAPPER: value = 0, type = export;
	NES_PRG_BANKS: value = 1, type = export;
	NES_CHR_BANKS: value = 0, type = export;
	NES_MIRRORING: value = 0, type = export;
}
